/**
 * There are <a href="https://github.com/thinkgem/jeesite">JeeSite</a> code generation
 */
package com.thinkgem.jeesite.modules.asmt.service;

import java.util.List;

import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.thinkgem.jeesite.common.persistence.Page;
import com.thinkgem.jeesite.common.service.BaseService;
import com.thinkgem.jeesite.modules.asmt.dao.RuleDao;
import com.thinkgem.jeesite.modules.asmt.entity.Rule;

/**
 * 考评规则Service
 * @author Yyz
 * @version 2017-08-25
 */
@Component
@Transactional(readOnly = true)
public class RuleService extends BaseService {

	@Autowired
	private RuleDao ruleDao;
	
	public Rule get(String id) {
		return ruleDao.get(id);
	}
	
	public Page<Rule> find(Page<Rule> page, Rule rule) {
		DetachedCriteria dc = ruleDao.createDetachedCriteria();
//		if (StringUtils.isNotEmpty(rule.getName())){
//			dc.add(Restrictions.like("name", "%"+rule.getName()+"%"));
//		}
//		dc.add(Restrictions.eq(Rule.FIELD_DEL_FLAG, Rule.DEL_FLAG_NORMAL));
		dc.addOrder(Order.asc("sort"));
		return ruleDao.find(page, dc);
	}
	
	@Transactional(readOnly = false)
	public void save(Rule rule) {
		ruleDao.save(rule);
	}
	
	@Transactional(readOnly = false)
	public void delete(String id) {
		ruleDao.deleteById(id);
	}

	public List<Rule> findAllRule(String asmtId) {
		return ruleDao.findByAssementId(asmtId);
	}
	
}

/**
 * There are <a href="https://github.com/thinkgem/jeesite">JeeSite</a> code generation
 */
package com.thinkgem.jeesite.modules.asmt.service;

import java.util.List;

import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.thinkgem.jeesite.common.persistence.Page;
import com.thinkgem.jeesite.common.service.BaseService;
import com.thinkgem.jeesite.modules.asmt.dao.AwardedMarkDao;
import com.thinkgem.jeesite.modules.asmt.dao.RuleDao;
import com.thinkgem.jeesite.modules.asmt.entity.AwardedMark;
import com.thinkgem.jeesite.modules.asmt.entity.Rule;

/**
 * 加分Service
 * 
 * @author Lucy
 * @version 2017-10-18
 */
@Component
@Transactional(readOnly = true)
public class AwardedMarkService extends BaseService {

	@Autowired
	private AwardedMarkDao awardedMarkDao;

	@Autowired
	private RuleDao ruleDao;

	public AwardedMark get(String id) {
		return awardedMarkDao.get(id);
	}

	public Page<AwardedMark> find(Page<AwardedMark> page, AwardedMark awardedMark) {
		DetachedCriteria dc = awardedMarkDao.createDetachedCriteria();
		dc.add(Restrictions.eq(AwardedMark.FIELD_DEL_FLAG, AwardedMark.DEL_FLAG_NORMAL));
		dc.addOrder(Order.desc("createDate"));
		return awardedMarkDao.find(page, dc);
	}

	/**
	 * 任务监督-加分申请
	 * 
	 * @author JianHui
	 * @param page
	 * @param aurIds
	 *            被考评用户规则ID集合
	 * @return
	 */
	public Page<AwardedMark> find(Page<AwardedMark> page, String[] aurIds) {
		DetachedCriteria dc = awardedMarkDao.createDetachedCriteria();
		if (aurIds != null) {
			dc.add(Restrictions.in("assementUserRule.id", aurIds));
		}
		dc.add(Restrictions.eq(AwardedMark.FIELD_DEL_FLAG, AwardedMark.DEL_FLAG_NORMAL));
		dc.addOrder(Order.asc("createDate"));
		return awardedMarkDao.find(page, dc);
	}

	public List<AwardedMark> findbyasmtUserandruleId(String asmUserRuleId) {
		return awardedMarkDao.findbyasmtUserandruleId(asmUserRuleId);
	}


	public Page<Rule> findRule(Page<Rule> page, AwardedMark awardedMark) {
		DetachedCriteria dc = ruleDao.createDetachedCriteria();
		// if (StringUtils.isNotEmpty(rule.getName())){
		// dc.add(Restrictions.like("name", "%"+rule.getName()+"%"));
		// }
		// dc.add(Restrictions.eq(Rule.FIELD_DEL_FLAG, Rule.DEL_FLAG_NORMAL));

		// if (null != awardedMark.getAssementUser() ) {
		dc.add(Restrictions.eq("type", "2"));
		dc.addOrder(Order.asc("sort"));
		return ruleDao.find(page, dc);
		// }
		// return page;

	}

	@Transactional(readOnly = false)
	public void save(AwardedMark awardedMark) {
		awardedMarkDao.save(awardedMark);
	}

	@Transactional(readOnly = false)
	public void delete(String id) {
		awardedMarkDao.deleteById(id);
	}

}

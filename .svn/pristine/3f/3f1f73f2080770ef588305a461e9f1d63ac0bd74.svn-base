/**
 * There are <a href="https://github.com/thinkgem/jeesite">JeeSite</a> code generation
 */
package com.thinkgem.jeesite.modules.asmt.entity;

import java.util.List;

import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.PrePersist;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.DynamicInsert;
import org.hibernate.annotations.DynamicUpdate;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;
import org.hibernate.annotations.ForeignKey;
import org.hibernate.annotations.NotFound;
import org.hibernate.annotations.NotFoundAction;
import org.hibernate.annotations.Where;
import org.hibernate.validator.constraints.Length;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.google.common.collect.Lists;
import com.thinkgem.jeesite.common.persistence.BaseEntity;
import com.thinkgem.jeesite.common.utils.IdGen;
import com.thinkgem.jeesite.common.utils.excel.annotation.ExcelField;
import com.thinkgem.jeesite.common.utils.excel.fieldtype.RoleListType;
import com.thinkgem.jeesite.modules.sys.entity.Role;

/**
 * 考评规则Entity
 * 
 * @author Yyz
 * @version 2017-08-25
 */
@Entity
@Table(name = "t_rule")
@DynamicInsert
@DynamicUpdate
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
public class Rule extends BaseEntity<Rule> {

	private static final long serialVersionUID = 1L;
	private String id; // 规则编号
	private Rule parent; // 父级规则
	private String parentIds; // 所有父级编号
	private Assement assement; // 考评
	private String isScoreTime; // 是否是评分项目（1：评分项；0：非评分项）
	private String type; // 类型（score：得分；dedScr：扣分；addScr：加分）
	private Integer scoreLimit; // 分值上限
	private String content; // 内容
	private Integer sort; 	// 排序

	private List<Role> roleList = Lists.newArrayList(); // 拥有角色列表

	private List<Rule> childList = Lists.newArrayList(); // 拥有子规则列表

	public Rule() {
		super();
		this.sort = 30;
	}

	public Rule(String id) {
		this();
		this.id = id;
	}

	@PrePersist
	public void prePersist() {
		this.id = IdGen.uuid();
	}

	@Id
	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "parent_id")
	@ForeignKey(name="null")
	@NotFound(action = NotFoundAction.IGNORE)
	public Rule getParent() {
		return parent;
	}

	public void setParent(Rule parent) {
		this.parent = parent;
	}

	@Length(min = 1, max = 255)
	public String getParentIds() {
		return parentIds;
	}

	public void setParentIds(String parentIds) {
		this.parentIds = parentIds;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "assement_id")
	@ForeignKey(name="null")
	@NotFound(action = NotFoundAction.IGNORE)
	@JsonIgnore
	@NotNull(message = "考评不能为空")
	@ExcelField(title = "考评", align = 2, sort = 25)
	public Assement getAssement() {
		return assement;
	}

	public void setAssement(Assement assement) {
		this.assement = assement;
	}

	@Length(min = 1, max = 1)
	public String getIsScoreTime() {
		return isScoreTime;
	}

	public void setIsScoreTime(String isScoreTime) {
		this.isScoreTime = isScoreTime;
	}

	@Length(min = 1, max = 10)
	public String getType() {
		return type;
	}

	public void setType(String type) {
		this.type = type;
	}

	public Integer getScoreLimit() {
		return scoreLimit;
	}

	public void setScoreLimit(Integer scoreLimit) {
		this.scoreLimit = scoreLimit;
	}

	@Length(min = 0, max = 1000)
	public String getContent() {
		return content;
	}

	public void setContent(String content) {
		this.content = content;
	}

	@ManyToMany(fetch = FetchType.EAGER)
	@JoinTable(name = "t_rule_role", joinColumns = { @JoinColumn(name = "rule_id") }, inverseJoinColumns = {
			@JoinColumn(name = "role_id") })
	@Where(clause = "del_flag='" + DEL_FLAG_NORMAL + "'")
	@OrderBy("id")
	@Fetch(FetchMode.SUBSELECT)
	@NotFound(action = NotFoundAction.IGNORE)
	@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
	@JsonIgnore
	@ExcelField(title = "拥有角色", align = 1, sort = 800, fieldType = RoleListType.class)
	public List<Role> getRoleList() {
		return roleList;
	}

	public void setRoleList(List<Role> roleList) {
		this.roleList = roleList;
	}

	@OneToMany(mappedBy = "parent", fetch = FetchType.LAZY)
	@Where(clause = "del_flag='" + DEL_FLAG_NORMAL + "'")
	@OrderBy(value = "id")
	@Fetch(FetchMode.SUBSELECT)
	@NotFound(action = NotFoundAction.IGNORE)
	@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
	public List<Rule> getChildList() {
		return childList;
	}

	public void setChildList(List<Rule> childList) {
		this.childList = childList;
	}
	
	@NotNull
	public Integer getSort() {
		return sort;
	}
	
	public void setSort(Integer sort) {
		this.sort = sort;
	}
}

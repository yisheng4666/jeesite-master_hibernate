/**
 * There are <a href="https://github.com/thinkgem/jeesite">JeeSite</a> code generation
 */
package com.thinkgem.jeesite.modules.asmt.service;

import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.thinkgem.jeesite.common.persistence.Page;
import com.thinkgem.jeesite.common.service.BaseService;
import com.thinkgem.jeesite.common.utils.StringUtils;
import com.thinkgem.jeesite.modules.asmt.entity.AwardedMark;
import com.thinkgem.jeesite.modules.asmt.dao.AwardedMarkDao;

/**
 * 加分Service
 * @author Lucy
 * @version 2017-10-18
 */
@Component
@Transactional(readOnly = true)
public class AwardedMarkService extends BaseService {

	@Autowired
	private AwardedMarkDao awardedMarkDao;
	
	public AwardedMark get(String id) {
		return awardedMarkDao.get(id);
	}
	
	public Page<AwardedMark> find(Page<AwardedMark> page, AwardedMark awardedMark) {
		DetachedCriteria dc = awardedMarkDao.createDetachedCriteria();
//		if (StringUtils.isNotEmpty(awardedMark.getName())){
//			dc.add(Restrictions.like("name", "%"+awardedMark.getName()+"%"));
//		}
		dc.add(Restrictions.eq(AwardedMark.FIELD_DEL_FLAG, AwardedMark.DEL_FLAG_NORMAL));
		dc.addOrder(Order.desc("id"));
		return awardedMarkDao.find(page, dc);
	}
	
	@Transactional(readOnly = false)
	public void save(AwardedMark awardedMark) {
		awardedMarkDao.save(awardedMark);
	}
	
	@Transactional(readOnly = false)
	public void delete(String id) {
		awardedMarkDao.deleteById(id);
	}
	
}

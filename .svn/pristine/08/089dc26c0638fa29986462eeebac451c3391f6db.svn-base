/**
 * There are <a href="https://github.com/thinkgem/jeesite">JeeSite</a> code generation
 */
package com.thinkgem.jeesite.modules.asmt.web;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.google.common.collect.Lists;
import com.thinkgem.jeesite.common.config.Global;
import com.thinkgem.jeesite.common.persistence.Page;
import com.thinkgem.jeesite.common.utils.StringUtils;
import com.thinkgem.jeesite.common.web.BaseController;
import com.thinkgem.jeesite.modules.asmt.entity.Assement;
import com.thinkgem.jeesite.modules.asmt.entity.AssementUser;
import com.thinkgem.jeesite.modules.asmt.entity.AssementUserRule;
import com.thinkgem.jeesite.modules.asmt.entity.AwardedMarRule;
import com.thinkgem.jeesite.modules.asmt.entity.AwardedMark;
import com.thinkgem.jeesite.modules.asmt.entity.Rule;
import com.thinkgem.jeesite.modules.asmt.service.AssementUserRuleService;
import com.thinkgem.jeesite.modules.asmt.service.AssementUserService;
import com.thinkgem.jeesite.modules.asmt.service.AwardedMarkService;
import com.thinkgem.jeesite.modules.asmt.service.RuleService;
import com.thinkgem.jeesite.modules.asmt.utils.AsmtUtils;
import com.thinkgem.jeesite.modules.sys.entity.User;
import com.thinkgem.jeesite.modules.sys.utils.UserUtils;

/**
 * 加分申请Controller
 * @author Lucy
 * @version 2017-10-18
 */
@Controller
@RequestMapping(value = "${adminPath}/asmt/awardedMark")
public class AwardedMarkController extends BaseController {

	@Autowired
	private AwardedMarkService awardedMarkService;
	@Autowired
	private AssementUserService assementUserService;
	@Autowired
	private RuleService ruleService;
	@Autowired 
	private AssementUserRuleService assementUserRuleService;

	@ModelAttribute
	public AwardedMark get(@RequestParam(required = false) String id) {
		if (StringUtils.isNotBlank(id)) {
			return awardedMarkService.get(id);
		} else {
			return new AwardedMark();
		}
	}

	@RequiresPermissions("asmt:awardedMark:view")
	@RequestMapping(value = { "list", "" })
	public String list(AwardedMark awardedMark, HttpServletRequest request, HttpServletResponse response, Model model) {
		User user = UserUtils.getUser();
		if (!user.isAdmin()) {
			awardedMark.setCreateBy(user);
		} else {
			List<AwardedMarRule> lists = new ArrayList<AwardedMarRule>();
			model.addAttribute("page", lists);
			return "modules/" + "asmt/awardedMarkList";
		}

		Assement asmt = AsmtUtils.getCurrAssement();
		
		AssementUser asmtUser = assementUserService.findByAssementAndUserId(asmt, user);

		List<AwardedMarRule> list = new ArrayList<AwardedMarRule>();

		List<AssementUserRule> list_asmtuserrule=assementUserRuleService.find(asmtUser.getId());//获取加分规则
		List<Rule> listrule=new ArrayList<Rule>();
		
		String auIds[]=new String[list_asmtuserrule.size()];
		List<String> auids=new ArrayList<String>();
		for(AssementUserRule e:list_asmtuserrule){
		  auids.add(e.getId());
		}
		for(AssementUserRule a:list_asmtuserrule){
		  listrule.add(a.getRule());
		}
		auids.toArray(auIds);
    Page<AwardedMark> list_a = awardedMarkService.find(new Page<AwardedMark>(request, response, -1), auIds);// 申请加分记录
		
    List<Rule> list2 = Lists.newArrayList();
    List<Rule> sourcelist = listrule;
    Rule.sortList(list2, sourcelist, "0");
		
		for (Rule r : list2) {
			AwardedMarRule ar = new AwardedMarRule();
			ar.setId(r.getId());
			ar.setPid(null == r.getParent() ? "0" : r.getParent().getId());
			ar.setContent(r.getContent());
			ar.setScore(String.valueOf(r.getScoreLimit()));

		
			if (r.getParentIds().split(",").length == 3) {
				ar.setOpreat("申请");
			}
	    list.add(ar);
			 


			for (Object ar1:list_a.getList()) {
				AwardedMarRule ar2 = new AwardedMarRule();
				if(((AwardedMark)ar1).getAssementUserRule().getRule().getId().equals(r.getId())){
				ar2.setId(((AwardedMark)ar1).getId());
				ar2.setPid(r.getId());
				ar2.setContent("申请原因:" + ((AwardedMark)ar1).getApplyReason() + "" + "<br/>" + b() + "申请分值:"
						+ ((AwardedMark)ar1).getApplyScore());
				ar2.setScore(String.valueOf(r.getScoreLimit()));
				ar2.setOpreat("跟踪");
				list.add(ar2);
				}
			}

		}
		model.addAttribute("page", list);

		return "modules/" + "asmt/awardedMarkList";
	}

	@RequiresPermissions("asmt:awardedMark:view")
	@RequestMapping(value = "groupAuditlist")
	public String groupAwrdedMarklist(AwardedMark awardedMark, HttpServletRequest request, HttpServletResponse response,
			Model model) {
		User user = UserUtils.getUser();
		if (!user.isAdmin()) {
			awardedMark.setCreateBy(user);
		}
		Page<AwardedMark> page = awardedMarkService.find(new Page<AwardedMark>(request, response, -1), awardedMark);
		model.addAttribute("page", page);
		System.out.println("groupAuditAwardedList");
		return "modules/" + "asmt/groupAuditAwardedList";
	}

	@RequiresPermissions("asmt:awardedMark:view")
	@RequestMapping(value = "confirmAuditlist")
	public String confirmAwardedMarklist(AwardedMark awardedMark, HttpServletRequest request,
			HttpServletResponse response, Model model) {
		User user = UserUtils.getUser();
		if (!user.isAdmin()) {
			awardedMark.setCreateBy(user);
		}
		Page<AwardedMark> page = awardedMarkService.find(new Page<AwardedMark>(request, response, -1), awardedMark);
		model.addAttribute("page", page);

		return "modules/" + "asmt/confirmAuditAwardedList";
	}

	@RequiresPermissions("asmt:awardedMark:view")
	@RequestMapping(value = { "groupAuditlis" })
	public String awardedMarklist(AwardedMark awardedMark, HttpServletRequest request, HttpServletResponse response,
			Model model) {
		User user = UserUtils.getUser();
		if (!user.isAdmin()) {
			awardedMark.setCreateBy(user);
		}
		
		List<AwardedMarRule> list = new ArrayList<AwardedMarRule>();
		
		model.addAttribute("page", list);

		return "modules/" + "asmt/awardedMarkList";
	}

	@RequiresPermissions("asmt:awardedMark:view")
	@RequestMapping(value = "form")
	public String form(@RequestParam(value = "ruleid") String ruleid, HttpServletRequest request,
			HttpServletResponse response, AwardedMark awardedMark, Model model) {
    Rule rule = ruleService.get(ruleid);
	  List<Rule> rule_list=new ArrayList<Rule>();
	  rule_list.add(rule.getParent().getParent());
	  rule_list.add(rule.getParent());
	  rule_list.add(rule);
	  User user = UserUtils.getUser();
	  Assement asmt = AsmtUtils.getCurrAssement();
	  AssementUser asmtUser = assementUserService.findByAssementAndUserId(asmt, user);
	  List<AssementUserRule> aur= assementUserRuleService.findByAsmtUserAndRule(asmtUser.getId(),ruleid);
		model.addAttribute("page", rule_list);
		awardedMark.setAssementUserRule(aur.get(0));
		model.addAttribute("awardedMark", awardedMark);
		model.addAttribute("ruleid", aur.get(0).getId());
		return "modules/" + "asmt/awardedMarkForm";
	}

	@RequiresPermissions("asmt:awardedMark:view")
	@RequestMapping(value = "groupform")
	public String groupform(AwardedMark awardedMark, Model model) {
		model.addAttribute("awardedMark", awardedMark);
		return "modules/" + "asmt/groupAuditAwardedForm";
	}

	@RequiresPermissions("asmt:awardedMark:view")
	@RequestMapping(value = "confirmform")
	public String confirmform(AwardedMark awardedMark, Model model) {
		model.addAttribute("awardedMark", awardedMark);
		return "modules/" + "asmt/confirmAuditAwardedForm";
	}

	@RequiresPermissions("asmt:awardedMark:edit")
	@RequestMapping(value = "save")
	public String save(@RequestParam(value = "file") MultipartFile file, AwardedMark awardedMark, Model model,
			RedirectAttributes redirectAttributes, HttpServletRequest request) {
		User user = UserUtils.getUser();
		if (!user.isAdmin()) {
			awardedMark.setCreateBy(user);
		}
		String path = request.getSession().getServletContext().getRealPath("uploadkk");
		String fileName = file.getOriginalFilename();
		File targetFile = new File(path, fileName);
		if (!targetFile.exists()) {
			targetFile.mkdirs();
		}
		// 保存
		try {
			file.transferTo(targetFile);
		} catch (Exception e) {
			e.printStackTrace();
		}

		awardedMark.setProveUrl(request.getContextPath() + "/upload/" + fileName);
		awardedMarkService.save(awardedMark);
		addMessage(redirectAttributes, "保存加分'" + "'成功");
		return "redirect:" + Global.getAdminPath() + "/asmt/awardedMark/?repage";
	}

	@RequiresPermissions("asmt:awardedMark:edit")
	@RequestMapping(value = "auditsave")
	public String auditSave(AwardedMark awardedMark, Model model, RedirectAttributes redirectAttributes,
			HttpServletRequest request) {

		User user = UserUtils.getUser();
		if (!user.isAdmin()) {
			awardedMark.setCreateBy(user);
		}

		awardedMarkService.save(awardedMark);
		addMessage(redirectAttributes, "保存加分'" + "'成功");
		return "redirect:" + Global.getAdminPath() + "/asmt/awardedMark/groupAuditlist/?repage";
	}

	@RequiresPermissions("asmt:awardedMark:edit")
	@RequestMapping(value = "confirmsave")
	public String confirmSave(AwardedMark awardedMark, Model model, RedirectAttributes redirectAttributes,
			HttpServletRequest request) {

		User user = UserUtils.getUser();
		if (!user.isAdmin()) {
			awardedMark.setCreateBy(user);
		}

		awardedMarkService.save(awardedMark);
		addMessage(redirectAttributes, "保存加分'" + "'成功");
		return "redirect:" + Global.getAdminPath() + "/asmt/awardedMark/confirmAuditlist/?repage";
		
	}

	@RequiresPermissions("asmt:awardedMark:edit")
	@RequestMapping(value = "delete")
	public String delete(String id, RedirectAttributes redirectAttributes) {

		awardedMarkService.delete(id);
		addMessage(redirectAttributes, "删除加分成功");
		return "redirect:" + Global.getAdminPath() + "/asmt/awardedMark/?repage";

	}

	private String b() {
		return "<span class='prev_sp'><span class='default_node default_blank'></span><span class='default_node default_blank'></span><span class='default_node default_blank'></span></span><span class='default_node default_last_leaf' arrow='true' > </span>";
	}

}

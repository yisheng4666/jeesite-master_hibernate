package com.thinkgem.jeesite.modules.asmt.web;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.google.common.collect.Lists;
import com.thinkgem.jeesite.common.beanvalidator.BeanValidators;
import com.thinkgem.jeesite.common.config.Global;
import com.thinkgem.jeesite.common.persistence.Page;
import com.thinkgem.jeesite.common.utils.StringUtils;
import com.thinkgem.jeesite.common.web.BaseController;
import com.thinkgem.jeesite.modules.asmt.entity.Assement;
import com.thinkgem.jeesite.modules.asmt.entity.AssementUser;
import com.thinkgem.jeesite.modules.asmt.service.AssementUserService;
import com.thinkgem.jeesite.modules.asmt.utils.AsmtUtils;
import com.thinkgem.jeesite.modules.sys.entity.Office;
import com.thinkgem.jeesite.modules.sys.entity.Role;
import com.thinkgem.jeesite.modules.sys.entity.User;
import com.thinkgem.jeesite.modules.sys.service.OfficeService;
import com.thinkgem.jeesite.modules.sys.service.SystemService;

/**
 * 被考评用户Controller
 * 
 * @author JianHui
 * @date 2017年9月6日--上午10:45:55
 *
 */

@Controller
@RequestMapping(value = "${adminPath}/asmt/assementUser")
public class AssementUserController extends BaseController {

	@Autowired
	private AssementUserService assementUserService;
	@Autowired
	private SystemService systemService;
	@Autowired
	private OfficeService officeService;

	@ModelAttribute
	public AssementUser get(@RequestParam(required = false) String id) {
		if (StringUtils.isNotBlank(id)) {
			return assementUserService.get(id);
		} else {
			return new AssementUser();
		}
	}

	@RequiresPermissions("asmt:assementUser:view")
	@RequestMapping("assementUserMain")
	public String assementUserMain() {
		return "modules/asmt/assementUserMain";
	}

	@RequiresPermissions("asmt:assementUser:view")
	@RequestMapping("groupingMain")
	public String groupingMain() {
		return "modules/asmt/groupingMain";
	}

	@RequiresPermissions("asmt:assement:view")
	@RequestMapping(value = "form")
	public String form(AssementUser assementUser, Model model) {
		model.addAttribute("assementUser", assementUser);
		return "modules/asmt/assementUserForm";
	}

	/**
	 * 获取参加当前考评的单位用户
	 * 
	 * @author JianHui
	 * @param assementUser
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 */
	@RequiresPermissions("asmt:assementUser:view")
	@RequestMapping(value = { "list", "" })
	public String list(AssementUser assementUser, HttpServletRequest request, HttpServletResponse response,
			Model model) {
		// 考评ID 9ed5c421ade3409682baca2783a0c873
		String assementId = "9ed5c421ade3409682baca2783a0c873";
		Assement assement = new Assement();
		assement.setId(assementId);
		assementUser.setAssement(assement);
		Page<AssementUser> page = assementUserService.find(new Page<AssementUser>(request, response), assementUser);
		model.addAttribute("page", page);
		return "modules/asmt/assementUserLeft";
	}

	/**
	 * 获取没有参加当前考评的单位用户
	 * 
	 * @author JianHui
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 */
	@RequiresPermissions("asmt:assementUser:view")
	@RequestMapping(value = { "userList", "" })
	public String userList(HttpServletRequest request, HttpServletResponse response, Model model) {
		// 考评ID 9ed5c421ade3409682baca2783a0c873
		String assementId = "9ed5c421ade3409682baca2783a0c873";
		List<AssementUser> list = assementUserService.find(assementId);
		String[] ids = getUserIds(list);
		Page<User> page = systemService.findByAssmentUser(new Page<User>(request, response), ids);
		model.addAttribute("page", page);
		return "modules/asmt/assementUserRight";
	}

	/**
	 * 获得当前考评的所有组
	 * 
	 * @author JianHui
	 * @param assementUser
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 */
	@RequiresPermissions("asmt:assementUser:view")
	@RequestMapping("groupingList")
	public String groupingList(AssementUser assementUser, HttpServletRequest request, HttpServletResponse response,
			Model model) {
		// 获得当前考评
		Assement assement = AsmtUtils.getCurrAssement();
		List<Office> offices = Lists.newArrayList();
		if (assementUser.getOffice() == null) {
			offices = officeService.findByAssement(assement);
		} else {
			String officeName = assementUser.getOffice().getName();
			offices = officeService.findByAssement(assement, officeName);
		}
		for (Office office : offices) {
			Integer num = assementUserService.getGroupMembersNum(office);
			office.setNum(num);
		}
		model.addAttribute("list", offices);
		return "modules/asmt/groupingLeft";
	}

	/**
	 * 获得当前考评中某一组的组内单位
	 * 
	 * @author JianHui
	 * @param officeId
	 *            组id
	 * @param assementUser
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 */
	@RequiresPermissions("asmt:assementUser:view")
	@RequestMapping("groupMembersList")
	public String groupMembersList(String officeId, AssementUser assementUser, HttpServletRequest request,
			HttpServletResponse response, Model model) {
		// 获得当前考评
		Assement assement = AsmtUtils.getCurrAssement();
		List<AssementUser> list = Lists.newArrayList();
		if (officeId != null) {
			if (assementUser.getUserName() == null || "".equals(assementUser.getUserName())) {
				list = assementUserService.findByGroupMembers(assement, officeId);
			} else {
				String userName = assementUser.getUserName();
				list = assementUserService.findByGroupMembers(assement, officeId, userName);
			}

		}
		model.addAttribute("list", list);
		model.addAttribute("officeId", officeId);
		return "modules/asmt/groupingCenter";
	}

	/**
	 * 检查登陆名是否存在
	 * 
	 * @author JianHui
	 * @param oldLoginName
	 * @param assementUser
	 * @return
	 */
	@ResponseBody
	@RequiresPermissions("asmt:assementUser:edit")
	@RequestMapping("checkLoginName")
	public String checkLoginName(String oldLoginName, AssementUser assementUser) {
		String loginName = assementUser.getUser().getLoginName();
		if (loginName != null && loginName.equals(oldLoginName)) {
			return "true";
		} else if (loginName != null && systemService.getUserByLoginName(loginName) == null) {
			return "true";
		}
		return "false";
	}

	/**
	 * 保存被考评单位
	 * 
	 * @author JianHui
	 * @param assementUser
	 * @param model
	 * @param redirectAttributes
	 * @return
	 */
	@RequiresPermissions("asmt:assementUser:edit")
	@RequestMapping(value = "save")
	public String save(AssementUser assementUser, Model model, RedirectAttributes redirectAttributes) {
		if (!beanValidator(model, assementUser)) {
			return form(assementUser, model);
		}
		try {
			if ("".equals(assementUser.getId())) {
				// 新增被考评数据时添加用户用户数据
				User newUser = convertUser(assementUser);
				systemService.saveUser(newUser);
				// 获得当前考评
				Assement assement = AsmtUtils.getCurrAssement();
				assementUser.setUser(newUser);
				assementUser.setAssement(assement);
				assementUser.setIsGroupLeader("0");
				assementUser.setIsSafe("0");
			} else {
				// 修改被考评单位名称时同步到用户
				assementUser.getUser().setName(assementUser.getUserName());
			}
			assementUserService.save(assementUser);
			addMessage(redirectAttributes, "保存被考评单位'" + assementUser.getUserName() + "'成功");
		} catch (Exception e) {
			addMessage(redirectAttributes, "保存被考评单位失败！失败信息：" + e.getMessage());
		}
		return "redirect:" + Global.getAdminPath() + "/asmt/assementUser/assementUserMain";
	}

	/**
	 * 加入考评
	 * 
	 * @author JianHui
	 * @param ids
	 * @param model
	 * @param redirectAttributes
	 * @return
	 */
	@RequiresPermissions("asmt:assementUser:edit")
	@RequestMapping(value = "joinAssement")
	public String joinAssement(String ids, Model model, RedirectAttributes redirectAttributes) {
		// 获得当前考评
		Assement assement = AsmtUtils.getCurrAssement();
		// 用来记录消息
		StringBuilder failureMsg = new StringBuilder();
		boolean flg = true;
		for (String id : ids.split(",")) {
			User user = systemService.getUser(id);
			AssementUser assementUser = convertAssementUser(user);
			// 加入当前考评
			assementUser.setAssement(assement);
			assementUserService.save(assementUser);
			if (flg) {
				failureMsg.append("'" + assementUser.getUserName() + "' 单位加入当前考评成功  ");
				flg = false;
			} else {
				failureMsg.append("<br/>'" + assementUser.getUserName() + "' 单位加入当前考评成功  ");
			}
		}
		addMessage(redirectAttributes, failureMsg + "");
		return "redirect:" + Global.getAdminPath() + "/asmt/assementUser/assementUserMain";
	}

	/**
	 * 移出考评
	 * 
	 * @author JianHui
	 * @param ids
	 * @param model
	 * @param redirectAttributes
	 * @return
	 */
	@RequiresPermissions("asmt:assementUser:edit")
	@RequestMapping(value = "removeAssement")
	public String removeAssement(String ids, Model model, RedirectAttributes redirectAttributes) {
		for (String id : ids.split(",")) {
			assementUserService.delete(id);
		}
		addMessage(redirectAttributes, "移除考评成功");
		return "redirect:" + Global.getAdminPath() + "/asmt/assementUser/assementUserMain";
	}

	/**
	 * 将用户转换成被考评单位
	 * 
	 * @author JianHui
	 * @param user
	 *            用户
	 * @return 被考评单位
	 */
	private AssementUser convertAssementUser(User user) {
		AssementUser au = new AssementUser();
		au.setUser(user);
		au.setUserName(user.getName());
		au.setOrganizationNo(user.getOrganizationNo());
		// 默认为不是组长
		au.setIsGroupLeader("0");
		// 默认为不是平安单位
		au.setIsSafe("0");
		au.setAttribute(user.getAttribute());
		au.setAppropriationType(user.getAppropriationType());
		au.setSort(10);
		return au;
	}

	/**
	 * 将被考评单位转换成用户
	 * 
	 * @author JianHui
	 * @param assementUser
	 *            被考评单位
	 * @return 用户
	 */
	private User convertUser(AssementUser assementUser) {
		User user = new User();
		user.setLoginName(assementUser.getUser().getLoginName());
		user.setName(assementUser.getUserName());
		user.setOrganizationNo(assementUser.getOrganizationNo());
		user.setIsOrganization("1");
		user.setAttribute(assementUser.getAttribute());
		user.setAppropriationType(assementUser.getAppropriationType());
		user.setPassword(SystemService.entryptPassword("123456"));
		user.setRemarks(assementUser.getRemarks());
		Role e = systemService.findRoleByName("被考评单位");
		user.getRoleList().add(e);
		BeanValidators.validateWithException(validator, user);
		return user;
	}

	/**
	 * 获取用户的id
	 * 
	 * @author JianHui
	 * @param list
	 * @return
	 */
	private String[] getUserIds(List<AssementUser> list) {
		if (list.size() == 0) {
			return null;
		} else {
			String[] ids = new String[list.size()];
			for (int i = 0; i < ids.length; i++) {
				ids[i] = list.get(i).getUser().getId();
			}
			return ids;
		}
	}

}

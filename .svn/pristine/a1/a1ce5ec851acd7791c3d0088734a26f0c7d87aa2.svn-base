/**
 * There are <a href="https://github.com/thinkgem/jeesite">JeeSite</a> code generation
 */
package com.thinkgem.jeesite.modules.asmt.web;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.thinkgem.jeesite.common.config.Global;
import com.thinkgem.jeesite.common.persistence.Page;
import com.thinkgem.jeesite.common.utils.StringUtils;
import com.thinkgem.jeesite.common.web.BaseController;
import com.thinkgem.jeesite.modules.asmt.entity.Assement;
import com.thinkgem.jeesite.modules.asmt.service.AssementService;
import com.thinkgem.jeesite.modules.sys.entity.User;
import com.thinkgem.jeesite.modules.sys.utils.UserUtils;

/**
 * 考评Controller
 * 
 * @author JianHui
 * @date 2017年9月5日--下午3:13:32
 *
 */

@Controller
@RequestMapping(value = "${adminPath}/asmt/assement")
public class AssementController extends BaseController {

	@Autowired
	private AssementService assementService;

	@ModelAttribute
	public Assement get(@RequestParam(required = false) String id) {
		if (StringUtils.isNotBlank(id)) {
			return assementService.get(id);
		} else {
			return new Assement();
		}
	}

	@RequiresPermissions("asmt:assement:view")
	@RequestMapping(value = { "list", "" })
	public String list(Assement assement, HttpServletRequest request, HttpServletResponse response, Model model) {
		// User user = UserUtils.getUser();
		// if (!user.isAdmin()){
		// assement.setCreateBy(user);
		// }

		// List<Assement> list = assementService.findAll();
		// model.addAttribute("list", list);
		Page<Assement> page = assementService.find(new Page<Assement>(request, response), assement);
		model.addAttribute("page", page);
		return "modules/asmt/assementList";
	}

	@RequiresPermissions("asmt:assement:view")
	@RequestMapping(value = "form")
	public String form(Assement assement, Model model) {
		// 组装年份数组
		List<String> yearlist = new ArrayList<String>();
		// 获得当前年份
		Calendar calendar = Calendar.getInstance();
		int year = calendar.get(Calendar.YEAR);
		for (int i = year; i < year + 21; i++) {
			yearlist.add(i + "");
		}
		model.addAttribute("yearList", yearlist);
		model.addAttribute("assement", assement);
		return "modules/asmt/assementForm";
	}

	@RequiresPermissions("asmt:assement:edit")
	@RequestMapping(value = "save")
	public String save(Assement assement, Model model, RedirectAttributes redirectAttributes) {
		if (!beanValidator(model, assement)) {
			return form(assement, model);
		}
		//
		// if (!user.isAdmin()) {
		// // 考评创建人
		// assement.setCreateBy(user);
		// }
		User user = UserUtils.getUser();
		if ("".equals(assement.getId())) {
			// 新增数据时设置创建时间,创建人和下发规则状态
			// 考评创建时间
			assement.setCreateDate(new Date());
			// 考评创建人
			assement.setCreateBy(user);
			// 默认未未下发规则 0-未下发规则 1-已下发规则
			assement.setIsPublish("0");
		} else {
			// 修改数据时添加修改时间和修改人
			// 考评修改时间
			assement.setUpdateDate(new Date());
			// 考评修改人
			assement.setUpdateBy(user);
		}
		assementService.save(assement);
		addMessage(redirectAttributes, "保存考评'" + assement.getName() + "'成功");
		return "redirect:" + Global.getAdminPath() + "/asmt/assement/?repage";
	}

	@RequiresPermissions("asmt:assement:edit")
	@RequestMapping(value = "delete")
	public String delete(String id, RedirectAttributes redirectAttributes) {
		assementService.delete(id);
		addMessage(redirectAttributes, "删除考评成功");
		return "redirect:" + Global.getAdminPath() + "/asmt/assement/?repage";
	}

}

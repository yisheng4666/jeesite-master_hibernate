package com.thinkgem.jeesite.modules.asmt.service;

import java.util.List;

import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import com.thinkgem.jeesite.common.persistence.Page;
import com.thinkgem.jeesite.common.service.BaseService;
import com.thinkgem.jeesite.common.utils.StringUtils;
import com.thinkgem.jeesite.modules.asmt.dao.AssementUserDao;
import com.thinkgem.jeesite.modules.asmt.entity.Assement;
import com.thinkgem.jeesite.modules.asmt.entity.AssementUser;
import com.thinkgem.jeesite.modules.sys.entity.Office;
import com.thinkgem.jeesite.modules.sys.entity.User;

/**
 * 被考评用户Service
 * 
 * @author JianHui
 * @date 2017年9月6日--上午10:44:01
 *
 */

@Component
@Transactional(readOnly = true)
public class AssementUserService extends BaseService {

	@Autowired
	private AssementUserDao assementUserDao;

	public AssementUser get(String id) {
		return assementUserDao.get(id);
	}

	public Page<AssementUser> find(Page<AssementUser> page, AssementUser assementUser) {
		DetachedCriteria dc = assementUserDao.createDetachedCriteria();
		if (StringUtils.isNotEmpty(assementUser.getAssement().getId())) {
			dc.add(Restrictions.eq("assement.id", assementUser.getAssement().getId()));
		}
		dc.add(Restrictions.eq(AssementUser.FIELD_DEL_FLAG, AssementUser.DEL_FLAG_NORMAL));
		dc.addOrder(Order.asc("organizationNo"));
		return assementUserDao.find(page, dc);
	}

	public List<AssementUser> find(String id) {
		DetachedCriteria dc = assementUserDao.createDetachedCriteria();
		dc.add(Restrictions.eq("assement.id", id));
		dc.add(Restrictions.eq(AssementUser.FIELD_DEL_FLAG, AssementUser.DEL_FLAG_NORMAL));
		dc.addOrder(Order.asc("organizationNo"));
		return assementUserDao.find(dc);
	}

	public AssementUser findByAssementAndUserId(Assement assement, User user) {
		return assementUserDao.findByAssementAndUserId(assement, user);
	}

	@Transactional(readOnly = false)
	public void save(AssementUser assementUser) {
		assementUserDao.save(assementUser);
	}

	@Transactional(readOnly = false)
	public void delete(String id) {
		assementUserDao.deleteById(id);
	}

	/**
	 * 
	 * 根据考评ID查询被考评单位
	 * 
	 * @author JianHui
	 * @param id
	 *            考评ID
	 * @return
	 */
	public List<AssementUser> findByAssement(String id) {
		List<AssementUser> list = assementUserDao.findByAssement(id);
		return list;
	}

	/**
	 * 获得组成员数量
	 * 
	 * @author JianHui
	 * @param office
	 *            组
	 * @return
	 */
	public Integer getGroupMembersNum(Office office) {
		Integer num = assementUserDao.getGroupMembersNum(office);
		return num;
	}

	/**
	 * 查询组内成员
	 * 
	 * @author JianHui
	 * @param assement
	 *            当前考评
	 * @param officeId
	 *            组ID
	 * @return
	 */
	public List<AssementUser> findByGroupMembers(Assement assement, String officeId) {
		DetachedCriteria dc = assementUserDao.createDetachedCriteria();
		if (StringUtils.isNotEmpty(assement.getId())) {
			dc.add(Restrictions.eq("assement.id", assement.getId()));
		}
		if (StringUtils.isNotEmpty(officeId)) {
			dc.add(Restrictions.eq("office.id", officeId));
		}
		dc.add(Restrictions.eq(AssementUser.FIELD_DEL_FLAG, AssementUser.DEL_FLAG_NORMAL));
		dc.addOrder(Order.asc("organizationNo"));
		return assementUserDao.find(dc);
	}

	/**
	 * 查询考评组内成员（分页查询）
	 * 
	 * @author JianHui
	 * @param page
	 * @param assement
	 *            考评
	 * @param officeId
	 *            考评组ID
	 * @param userName
	 *            单位名称
	 * @return
	 */
	public Page<AssementUser> findByGroupMembers(Page<AssementUser> page, Assement assement, String officeId,
			String userName) {
		DetachedCriteria dc = assementUserDao.createDetachedCriteria();
		if (StringUtils.isEmpty(officeId)) {
			return null;
		} else {
			if (StringUtils.isNotEmpty(assement.getId())) {
				dc.add(Restrictions.eq("assement.id", assement.getId()));
			}
			if (StringUtils.isNotEmpty(officeId)) {
				dc.add(Restrictions.eq("office.id", officeId));
			}
			if (StringUtils.isNotEmpty(userName)) {
				dc.add(Restrictions.like("userName", "%" + userName + "%"));
			}
			dc.add(Restrictions.eq(AssementUser.FIELD_DEL_FLAG, AssementUser.DEL_FLAG_NORMAL));
			dc.addOrder(Order.asc("organizationNo"));
			return assementUserDao.find(page, dc);
		}
	}

	/**
	 * 查询当前考评中没有分组的被考评单位（分页）
	 * 
	 * @author JianHui
	 * @param page
	 * @param assement
	 * @param userName
	 * @return
	 */
	public Page<AssementUser> findByNotGroupMembers(Page<AssementUser> page, Assement assement, String officeId,
			String userName) {
		DetachedCriteria dc = assementUserDao.createDetachedCriteria();
		if (StringUtils.isEmpty(officeId)) {
			return null;
		} else {
			if (StringUtils.isNotEmpty(assement.getId())) {
				dc.add(Restrictions.eq("assement.id", assement.getId()));
			}
			dc.add(Restrictions.isNull("office.id"));
			if (StringUtils.isNotEmpty(userName)) {
				dc.add(Restrictions.like("userName", "%" + userName + "%"));
			}
			dc.add(Restrictions.eq(AssementUser.FIELD_DEL_FLAG, AssementUser.DEL_FLAG_NORMAL));
			dc.addOrder(Order.asc("organizationNo"));
			return assementUserDao.find(page, dc);
		}
	}

	/**
	 * 查询当前考评中没有分组的被考评单位
	 * 
	 * @author JianHui
	 * @param page
	 * @param assement
	 * @param userName
	 * @return
	 */
	public List<AssementUser> findByNotGroupMembers(Assement assement) {
		DetachedCriteria dc = assementUserDao.createDetachedCriteria();
		if (StringUtils.isNotEmpty(assement.getId())) {
			dc.add(Restrictions.eq("assement.id", assement.getId()));
		}
		dc.add(Restrictions.isNull("office.id"));
		dc.add(Restrictions.eq(AssementUser.FIELD_DEL_FLAG, AssementUser.DEL_FLAG_NORMAL));
		dc.addOrder(Order.asc("organizationNo"));
		return assementUserDao.find(dc);
	}

	/**
	 * 根据考评和考评单位ID查询考评单位
	 * 
	 * @author JianHui
	 * @param assement
	 *            考评
	 * @param id
	 *            考评单位id
	 * @return
	 */
	public AssementUser findByAssementAndId(Assement assement, String id) {
		AssementUser assementUser = assementUserDao.findByAssementAndId(assement, id);
		return assementUser;
	}

	/**
	 * 查询考评组内的组长单位
	 * 
	 * @author JianHui
	 * @param assement
	 *            考评
	 * @param office
	 *            考评组
	 * @return
	 */
	public List<AssementUser> findGroupLeaderByAssement(Assement assement, Office office) {
		List<AssementUser> list = assementUserDao.findGroupLeaderByAssement(assement, office);
		return list;
	}

	/**
	 * 任务监督-组长单位评分
	 * 
	 * @author JianHui
	 * @param page
	 * @param assementUser
	 * @param ids
	 * @return
	 */
	public Page<AssementUser> findGroupLeaderByAssement(Page<AssementUser> page, AssementUser assementUser,
			String[] ids) {
		DetachedCriteria dc = assementUserDao.createDetachedCriteria();
		dc.add(Restrictions.eq(AssementUser.FIELD_DEL_FLAG, AssementUser.DEL_FLAG_NORMAL));
		dc.addOrder(Order.asc("office.id")).addOrder(Order.asc("organizationNo"));
		if (assementUser.getAssement() != null) {
			dc.add(Restrictions.eq("assement.id", assementUser.getAssement().getId()));
		}
		dc.add(Restrictions.eq("isGroupLeader", "1"));
		if (ids != null) {
			dc.add(Restrictions.in("office.id", ids));
		}
		if (assementUser.getOffice() != null) {
			dc = dc.createCriteria("office");
			dc.add(Restrictions.like("name", assementUser.getOffice().getName(), MatchMode.ANYWHERE));
		}
		return assementUserDao.find(page, dc);
	}

	public Page<AssementUser> query(Page<AssementUser> page, AssementUser assementUser) {
		DetachedCriteria dc = assementUserDao.createDetachedCriteria();
		dc.add(Restrictions.eq(AssementUser.FIELD_DEL_FLAG, AssementUser.DEL_FLAG_NORMAL));
		dc.addOrder(Order.asc("office.id")).addOrder(Order.asc("organizationNo"));
		if (StringUtils.isNotEmpty(assementUser.getUserName())) {
			dc.add(Restrictions.like("userName", "%" + assementUser.getUserName() + "%"));
		}
		if (assementUser.getOffice() != null) {
			dc = dc.createCriteria("office");
			dc.add(Restrictions.like("name", "%" + assementUser.getOffice().getName() + "%"));
		}
		return assementUserDao.find(page, dc);
	}

}

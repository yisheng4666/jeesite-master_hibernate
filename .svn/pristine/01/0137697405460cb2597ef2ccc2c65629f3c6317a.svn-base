/**
 * There are <a href="https://github.com/thinkgem/jeesite">JeeSite</a> code generation
 */
package com.thinkgem.jeesite.modules.asmt.web;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.apache.shiro.authz.annotation.RequiresUser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.thinkgem.jeesite.common.config.Global;
import com.thinkgem.jeesite.common.persistence.Page;
import com.thinkgem.jeesite.common.utils.StringUtils;
import com.thinkgem.jeesite.common.web.BaseController;
import com.thinkgem.jeesite.modules.asmt.entity.Assement;
import com.thinkgem.jeesite.modules.asmt.entity.Rule;
import com.thinkgem.jeesite.modules.asmt.entity.RuleUser;
import com.thinkgem.jeesite.modules.asmt.service.RuleService;
import com.thinkgem.jeesite.modules.asmt.utils.AsmtUtils;
import com.thinkgem.jeesite.modules.sys.entity.Dict;
import com.thinkgem.jeesite.modules.sys.entity.User;
import com.thinkgem.jeesite.modules.sys.service.SystemService;
import com.thinkgem.jeesite.modules.sys.utils.DictUtils;

/**
 * 考评规则Controller
 * @author Yyz
 * @version 2017-08-25
 */
@Controller
@RequestMapping(value = "${adminPath}/asmt/rule")
public class RuleController extends BaseController {

	@Autowired
	private RuleService ruleService;
//	@Autowired
//	private AssementService assementService;
	@Autowired
	private SystemService systemService;
	
	@ModelAttribute
	public Rule get(@RequestParam(required=false) String id) {
		if (StringUtils.isNotBlank(id)){
			return ruleService.get(id);
		}else{
			return new Rule();
		}
	}
	
	@RequiresPermissions("asmt:rule:view")
	@RequestMapping(value = {"list", ""})
	public String list(Rule rule, HttpServletRequest request, HttpServletResponse response, Model model) {
//		User user = UserUtils.getUser();
//		if (!user.isAdmin()){
//			rule.setCreateBy(user);
//		}
//		model.addAttribute("asmtMap", assementService.findAllBySelect());
		Assement asmt = AsmtUtils.getCurrAssement();
		rule.setAssement(asmt);
		
		if (null == asmt) {
			addMessage(model, "无法获得当前考评！");
		}
		
        Page<Rule> page = ruleService.find(new Page<Rule>(request, response, -1), rule); 
        model.addAttribute("page", page);
        model.addAttribute("rule", rule);
        
//        model.addAttribute("currAsmt", asmt);
		return "modules/" + "asmt/ruleList";
	}

	@RequiresPermissions("asmt:rule:view")
	@RequestMapping(value = "form")
	public String form(Rule rule, Model model) {
		Assement asmt = AsmtUtils.getCurrAssement();
		rule.setAssement(asmt);
		
		if (null == asmt) {
			addMessage(model, "无法获得当前考评！");
		}
		
		if (null != rule.getParent() && null != rule.getParent().getId()) {
			rule.setParent(ruleService.get(rule.getParent().getId()));
		}
		model.addAttribute("rule", rule);
		model.addAttribute("allRoles", systemService.findAllRole());
		
		List<RuleUser> scrRus = Lists.newArrayList();
		List<RuleUser> incRus = Lists.newArrayList();
		List<RuleUser> rus = ruleService.findRuleUserByRule(rule.getId());
		for (RuleUser ru : rus) {
			if ("3".equals(ru.getUseType())) { // 使用类型为事件录入用户
				incRus.add(ru);
			} else { // 其它为评分用户
				scrRus.add(ru);
			}
		}
		
		model.addAttribute("scrRus", scrRus);
		model.addAttribute("incRus", incRus);
		
		return "modules/" + "asmt/ruleForm";
	}

	@RequiresPermissions("asmt:rule:edit")
	@RequestMapping(value = "save")
	public String save(Rule rule, Model model, RedirectAttributes redirectAttributes) {
		Assement asmt = AsmtUtils.getCurrAssement();
		rule.setAssement(asmt);
		
		if (!beanValidator(model, rule)){
			return form(rule, model);
		}
		
		ruleService.save(rule);
		
//		addMessage(redirectAttributes, "保存考评规则'" + rule.getName() + "'成功");
//		return "redirect:"+Global.getAdminPath()+"/asmt/rule/?repage";
		return "redirect:"+Global.getAdminPath()+"/asmt/rule/form?id="+rule.getId();
	}
	
	@RequiresPermissions("asmt:rule:edit")
	@RequestMapping(value = "delete")
	public String delete(String id, RedirectAttributes redirectAttributes) {
		ruleService.delete(id);
		addMessage(redirectAttributes, "删除考评规则成功");
		return "redirect:"+Global.getAdminPath()+"/asmt/rule/?repage";
	}
	
	@RequiresPermissions("asmt:rule:edit")
	@RequestMapping(value = "usertorule")
	public String selectUserToRule(Rule rule, String type, Model model) {
		RuleUser tempRuleUser = new RuleUser();
		tempRuleUser.setRule(rule);
		tempRuleUser.setType(type);
		model.addAttribute("ruleUser", tempRuleUser);
		model.addAttribute("type", type);
		
		// 获得除事件录入类型的其它字典
		List<Dict> dicts = Lists.newArrayList();
		if ("1".equals(type)) {
			List<Dict> _dicts = DictUtils.getDictList("ruleUser_useType");
			for (Dict d : _dicts) {
				if (!"3".equals(d.getValue())) 
					dicts.add(d);
			}
		}
		model.addAttribute("usetype", dicts);
		
		// 获得所有用户，排除已选择的
		List<User> users = systemService.findAllUser();
		List<User> exts = Lists.newArrayList();
		for (RuleUser ruleUser : ruleService.findRuleUserByRule(rule.getId())) {
			if ("1".equals(type)) {
				if (!"3".equals(ruleUser.getUseType()))
					exts.add(ruleUser.getUser());
			} else {
				if ("3".equals(ruleUser.getUseType()))
					exts.add(ruleUser.getUser());
			}
		}
		users.removeAll(exts);
		model.addAttribute("userlist", users);
		
		return "modules/asmt/selectUserToRule";
	}
	
	@RequiresPermissions("asmt:rule:edit")
	@RequestMapping(value = "saveSelectUser")
	public String saveSelectUser(Rule rule, String ruserIds, String ruserType, Model model) {
		if (StringUtils.isNotEmpty(ruserIds)) {
			for (String userId : ruserIds.split(",")) {
				User user = systemService.getUser(userId.trim());
				
				RuleUser saveRuleUser = new RuleUser();
				saveRuleUser.setRule(rule);
				saveRuleUser.setUser(user);
				saveRuleUser.setUseType(ruserType);
				
				ruleService.saveRuleUser(saveRuleUser);;
			}
		}
		
		return "redirect:"+Global.getAdminPath()+"/asmt/rule/form?id="+rule.getId();
	}
	
	@RequiresPermissions("asmt:rule:edit")
	@RequestMapping(value = "deleteRuleUser")
	public String deleteRuleUser(Rule rule, String ruId, RedirectAttributes redirectAttributes) {
		
		ruleService.deleteRuleUser(ruId);
		addMessage(redirectAttributes, "删除规则关联用户成功");
		
		return "redirect:"+Global.getAdminPath()+"/asmt/rule/form?id="+rule.getId();
	}

	@RequiresUser
	@ResponseBody
	@RequestMapping(value = "treeData")
	public List<Map<String, Object>> treeData(@RequestParam(required=false) Long extId, HttpServletResponse response) {
		response.setContentType("application/json; charset=UTF-8");
		List<Map<String, Object>> mapList = Lists.newArrayList();
		
		Assement asmt = AsmtUtils.getCurrAssement();
		if (null != asmt) {
			List<Rule> list = ruleService.findAllRule(asmt.getId());
			for (int i=0; i<list.size(); i++){
				Rule e = list.get(i);
				if (extId == null || (extId!=null && !extId.equals(e.getId()) && e.getParentIds().indexOf(","+extId+",")==-1)){
					Map<String, Object> map = Maps.newLinkedHashMap();
					map.put("id", e.getId());
					map.put("pId", e.getParent()!=null?e.getParent().getId():0);
					map.put("name", e.getContent());
					mapList.add(map);
				}
			}
		}
		
		return mapList;
	}
}

/**
 * There are <a href="https://github.com/thinkgem/jeesite">JeeSite</a> code generation
 */
package com.thinkgem.jeesite.modules.asmt.web;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.thinkgem.jeesite.common.config.Global;
import com.thinkgem.jeesite.common.persistence.Page;
import com.thinkgem.jeesite.common.web.BaseController;
import com.thinkgem.jeesite.common.utils.StringUtils;
import com.thinkgem.jeesite.modules.sys.entity.User;
import com.thinkgem.jeesite.modules.sys.utils.UserUtils;
import com.thinkgem.jeesite.modules.asmt.entity.Assement;
import com.thinkgem.jeesite.modules.asmt.entity.AssementUser;
import com.thinkgem.jeesite.modules.asmt.entity.AwardedMarRule;
import com.thinkgem.jeesite.modules.asmt.entity.AwardedMark;
import com.thinkgem.jeesite.modules.asmt.entity.Rule;
import com.thinkgem.jeesite.modules.asmt.service.AssementUserService;
import com.thinkgem.jeesite.modules.asmt.service.AwardedMarkService;
import com.thinkgem.jeesite.modules.asmt.service.RuleService;
import com.thinkgem.jeesite.modules.asmt.utils.AsmtUtils;

/**
 * 加分Controller
 * @author Lucy
 * @version 2017-10-18
 */
@Controller
@RequestMapping(value = "${adminPath}/asmt/awardedMark")
public class AwardedMarkController extends BaseController {

	@Autowired
	private AwardedMarkService awardedMarkService;
  @Autowired
  private AssementUserService assementUserService;
  @Autowired
  private RuleService ruleService;
  
	@ModelAttribute
	public AwardedMark get(@RequestParam(required=false) String id) {
		if (StringUtils.isNotBlank(id)){
			return awardedMarkService.get(id);
		}else{
			return new AwardedMark();
		}
	}
	
	@RequiresPermissions("asmt:awardedMark:view")
	@RequestMapping(value = {"list", ""})
	public String list(AwardedMark awardedMark, HttpServletRequest request, HttpServletResponse response, Model model) {
		User user = UserUtils.getUser();
		if (!user.isAdmin()){
			awardedMark.setCreateBy(user);
		}
		
		Assement asmt = AsmtUtils.getCurrAssement();
    AssementUser asmtUser =assementUserService.findByAssementAndUserId(asmt, user);
		
		List<AwardedMarRule> list=new ArrayList<AwardedMarRule>() ;
        
        Page<Rule> page = awardedMarkService.findRule(new Page<Rule>(request, response, -1), awardedMark); 
       List<Rule> rlist= page.getList();
       for(Rule r:rlist){
         AwardedMarRule ar=new AwardedMarRule();
         ar.setId(r.getId());
         ar.setPid(null==r.getParent()?"0":r.getParent().getId());
         ar.setContent(r.getContent());
         ar.setScore(String.valueOf(r.getScoreLimit()));
         
         List<AwardedMark> list_a= awardedMarkService.findbyasmtUserandruleId(asmtUser.getId(), r.getId());
         if(r.getParentIds().split(",").length==3){
           ar.setOpreat("申请");
         }
         list.add(ar);
         if(list_a.size()>0){
        // AwardedMark am=awardedMarkService.get("2f8a9439572c40a6915ff3d78880f0b3");
         AwardedMarRule ar2=new AwardedMarRule();
         ar2.setId(list_a.get(0).getId());
         ar2.setPid(r.getId());
         ar2.setContent("申请原因:"+list_a.get(0).getApply_reason()+""+"<br/>"+b()+"申请分值:"+list_a.get(0).getApply_score());
         ar2.setScore(String.valueOf(r.getScoreLimit()));
         ar2.setOpreat("跟踪");
         list.add(ar2);
         }
        
       }
        model.addAttribute("page", list);
 
		return "modules/" + "asmt/awardedMarkList";
	}

  @RequiresPermissions("asmt:awardedMark:view")
  @RequestMapping(value = {"groupAuditlis"})
  public String awardedMarklist(AwardedMark awardedMark, HttpServletRequest request, HttpServletResponse response, Model model) {
    User user = UserUtils.getUser();
    if (!user.isAdmin()){
      awardedMark.setCreateBy(user);
    }
    
    Assement asmt = AsmtUtils.getCurrAssement();
    AssementUser asmtUser =assementUserService.findByAssementAndUserId(asmt, user);
    
    List<AwardedMarRule> list=new ArrayList<AwardedMarRule>() ;
        
       // Page<Rule> page = awardedMarkService.findRule(new Page<Rule>(request, response, -1), awardedMark); 
        Page<AwardedMark> page = awardedMarkService.find(new Page<AwardedMark>(request, response, -1), awardedMark);
        model.addAttribute("page", list);
 
    return "modules/" + "asmt/awardedMarkList";
  }
  
	@RequiresPermissions("asmt:awardedMark:view")
	@RequestMapping(value = "form")
	public String form(@RequestParam(value = "ruleid") String ruleid,HttpServletRequest request, HttpServletResponse response,AwardedMark awardedMark, Model model) {
    Page<Rule> page = awardedMarkService.findRule(new Page<Rule>(request, response, -1), awardedMark); 
    model.addAttribute("page", page);
    Rule rule= ruleService.get(ruleid);
    awardedMark.setRule(rule);
		model.addAttribute("awardedMark", awardedMark);
		model.addAttribute("ruleid", ruleid);
		return "modules/" + "asmt/awardedMarkForm";
	}

	@RequiresPermissions("asmt:awardedMark:edit")
	@RequestMapping(value = "save")
	public String save(@RequestParam(value = "file") MultipartFile file,AwardedMark awardedMark, Model model, RedirectAttributes redirectAttributes, HttpServletRequest request) {
//		if (!beanValidator(model, awardedMark)){
//			return form(awardedMark, model);
//		}
	  User user = UserUtils.getUser();
    if (!user.isAdmin()){
      awardedMark.setCreateBy(user);
    }
    
    
	    Assement asmt = AsmtUtils.getCurrAssement();
	    AssementUser asmtUser =assementUserService.findByAssementAndUserId(asmt, user);
	    awardedMark.setAssementUser(asmtUser);
	    
//	    Rule rule= ruleService.get(awardedMark.getRule().);
	    
	    String path = request.getSession().getServletContext().getRealPath("uploadkk");  
	    String fileName = file.getOriginalFilename(); 
	    
	   
	    File targetFile = new File(path, fileName);  
	    if(!targetFile.exists()){  
	        targetFile.mkdirs();  
	    }  

	    //保存  
	    try {  
	        file.transferTo(targetFile);  
	    } catch (Exception e) {  
	        e.printStackTrace();  
	    }  

	    awardedMark.setProve_url(request.getContextPath()+"/upload/"+fileName);
	    
	   // awardedMark.setRule(rule);
		awardedMarkService.save(awardedMark);
		addMessage(redirectAttributes, "保存加分'"  + "'成功");
		return "redirect:"+Global.getAdminPath()+"/asmt/awardedMark/?repage";
	}
	
	@RequiresPermissions("asmt:awardedMark:edit")
	@RequestMapping(value = "delete")
	public String delete(String id, RedirectAttributes redirectAttributes) {
		awardedMarkService.delete(id);
		addMessage(redirectAttributes, "删除加分成功");
		return "redirect:"+Global.getAdminPath()+"/asmt/awardedMark/?repage";
	}
	
	private String b(){
	return  "<span class='prev_sp'><span class='default_node default_blank'></span><span class='default_node default_blank'></span><span class='default_node default_blank'></span></span><span class='default_node default_last_leaf' arrow='true' > </span>";
	}

}

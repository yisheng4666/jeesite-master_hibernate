package com.thinkgem.jeesite.modules.asmt.web;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.google.common.collect.Lists;
import com.thinkgem.jeesite.common.utils.StringUtils;
import com.thinkgem.jeesite.common.web.BaseController;
import com.thinkgem.jeesite.modules.asmt.entity.Assement;
import com.thinkgem.jeesite.modules.asmt.entity.AssementUser;
import com.thinkgem.jeesite.modules.asmt.entity.AssementUserTree;
import com.thinkgem.jeesite.modules.asmt.service.AssementUserservice;
import com.thinkgem.jeesite.modules.sys.entity.Office;

/**
 * 被考评用户Controller
 * 
 * @author JianHui
 * @date 2017年9月6日--上午10:45:55
 *
 */

@Controller
@RequestMapping(value = "${adminPath}/aprs/assementUser")
public class AssementUserController extends BaseController {

	@Autowired
	AssementUserservice assementUserservice;

	@ModelAttribute
	public AssementUser get(@RequestParam(required = false) String id) {
		if (StringUtils.isNotBlank(id)) {
			return assementUserservice.get(id);
		} else {
			return new AssementUser();
		}
	}

	@RequiresPermissions("aprs:assementUser:view")
	@RequestMapping(value = { "list", "" })
	public String list(Assement assement, HttpServletRequest request, HttpServletResponse response, Model model) {
		List<AssementUserTree> list = Lists.newArrayList();
		List<AssementUser> sourcelist = assementUserservice.findTree();
		list = assembleList(list, sourcelist);
		model.addAttribute("list", list);
		return "modules/aprs/assementUserList";
	}

	/**
	 * 组装被考评单位数组
	 * 
	 * @param list
	 *            AssementUserTree 组装后的tree
	 * @param sourcelist
	 *            数据库查询的数据集
	 * @return
	 */
	public List<AssementUserTree> assembleList(List<AssementUserTree> list, List<AssementUser> sourcelist) {
		list = getOfficeConvertAssementUserTree(sourcelist);
		for (int i = 0; i < sourcelist.size(); i++) {
			AssementUser au = sourcelist.get(i);
			AssementUserTree aut = copyProperties(au);
			list.add(aut);
		}
		return list;
	}

	// 将AssementUser 转换成 AssementUserTree
	public AssementUserTree copyProperties(AssementUser au) {
		AssementUserTree aut = new AssementUserTree();
		aut.setId(au.getId());
		aut.setAssement(au.getAssement());
		aut.setOffice(au.getOffice());
		aut.setUser(au.getUser());
		aut.setUserName(au.getUserName());
		aut.setOrganizationNo(au.getOrganizationNo());
		return aut;
	}

	// 获取被考评组，并且将被考评组转换成AssementUserTree
	public List<AssementUserTree> getOfficeConvertAssementUserTree(List<AssementUser> sourcelist) {
		List<AssementUserTree> list = new ArrayList<AssementUserTree>();
		int no = 100;
		for (int i = 0; i < sourcelist.size(); i++) {
			AssementUser au = sourcelist.get(i);
			if (au.getOffice() != null) {
				Office office = au.getOffice();
				boolean bool = isExist(list, office.getId());
				if (!bool) {
					AssementUserTree aut = new AssementUserTree();
					aut.setId(office.getId());
					aut.setAssement(au.getAssement());
					aut.setUserName(office.getName());
					aut.setOrganizationNo(no + "");
					no += 100;
					list.add(aut);
				}
			}
		}
		return list;
	}

	// 判断组是否存在
	public static boolean isExist(List<AssementUserTree> list, String id) {
		for (AssementUserTree aut : list) {
			if (aut.getId().equals(id)) {
				return true;
			}
		}
		return false;
	}

}
